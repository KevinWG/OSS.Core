using OSS.Core;
using OSS.Core.Context.Attributes;
using {solution_name};
using System.Text.Json.Serialization;
using OSS.Core.Extension.Mvc.Configuration;

// ========================================  容器依赖注入   ========================================

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddOssCoreConfiguration(builder.Configuration); // 全局配置处理

// 注册内部全局初始化
builder.Services.Register<{module_name}RepStarter>();       // 仓储层
builder.Services.Register<{module_name}ServiceStarter>();   // 逻辑服务层

// 注册依赖的外部客户端
builder.Services.Register<{module_name}UsedClientStarter>();  

builder.Services.AddControllers(opt =>
{
    opt.AddCoreModelValidation();
    opt.AddCoreAppAuthorization();

    opt.AddCoreUserAuthorization(new DefaultUserAuthProvider(),new DefaultFuncAuthProvider());

}).AddJsonOptions(jsonOpt =>
{
    jsonOpt.JsonSerializerOptions.DefaultIgnoreCondition  = JsonIgnoreCondition.WhenWritingNull;
    jsonOpt.JsonSerializerOptions.PropertyNamingPolicy    = null;
});

builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();



// ========================================  中间件部分处理   ========================================

var app   = builder.Build();

var isDev = app.Environment.IsDevelopment();

if (isDev)
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseOssCore();
if (!isDev)
{
    app.UseOssCoreException();
}

app.MapControllers();
app.Run();