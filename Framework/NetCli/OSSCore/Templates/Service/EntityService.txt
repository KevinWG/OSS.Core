using OSS.Common;
using OSS.Common.Resp;
using OSS.Core.Domain;
using OSS.Common.Extension;

namespace {{solution_name}};

/// <summary>
///  {{entity_display}} 服务
/// </summary>
public class {{entity_code}}Service : I{{entity_code}}OpenService
{
    {% assign entity_name_lower = entity_name|downcase %}

{% if mode == 1000 %}  
     private static readonly I{{entity_code}}Rep _rep = InsContainer<I{{entity_code}}Rep>.Instance;
{% else %}  
     private static readonly {{entity_code}}Rep _{{entity_name_lower}}Rep = new();
{% endif %}

    static {{entity_code}}Service() 
    {
        // 放置解决方案内其他公用服务的引用
        // 如: _xxxService = InsContainer<IxxxCommonService>.Instance;
    }

    /// <inheritdoc />
    public async Task<TokenPageListResp<{{entity_code}}Mo>> MSearch(Search{{entity_code}}Req req)
    {
        var pageList = await _{{entity_name_lower}}Rep.Search(req);
         return pageList.ToTokenPageRespWithIdToken();
    }

    /// <inheritdoc />
    public Task<Resp<{{entity_code}}Mo>> Get(long id)
    {
        var  taskEnt = _{{entity_name_lower}}Rep.GetById(id);
        return new Resp<{{entity_code}}Mo>().WithTaskData(taskEnt, "未能找到{{entity_display}}对象");
    }

    ///// <inheritdoc />
    //public async Task<Resp<{{entity_code}}Mo>> GetUseable(long id)
    //{
    //    var getRes = await Get(id);
    //    if (!getRes.IsSuccess())
    //        return getRes;
    //    
    //    return getRes.data.status >= 0 
    //        ? getRes
    //        : new Resp<{{entity_code}}Mo>().WithResp(RespCodes.OperateObjectNull,"未能找到有效可用的{{entity_display}}信息");
    //}

    /// <inheritdoc />
    public Task<Resp> SetUseable(string pass_token, ushort flag)
    {
        var id = PassTokenHelper.GetData(pass_token).ToInt64();

        return _{{entity_name_lower}}Rep.UpdateStatus(id, flag == 1 ? CommonStatus.Original : CommonStatus.UnActive);
    }

    /// <inheritdoc />
    public async Task<LongResp> Add(Add{{entity_code}}Req req)
    {
        var mo = req.ToMo();

        await _{{entity_name_lower}}Rep.Add(mo);
        return new LongResp(mo.id);
    }
}