using OSS.Common;
using OSS.Common.Resp;
using OSS.Core.Client.Http;

namespace {{solution_name}}.Client;

/// <summary>
///  {{entity_display}} 接口客户端
/// </summary>
internal class {{entity_code}}HttpClient : I{{entity_code}}OpenService
{
     private const string apiEntityPath = "/{{entity_code}}";

    /// <inheritdoc />
    public Task<TokenPageListResp<{{entity_code}}Mo>> MSearch(Search{{entity_code}}Req req)
    {
          var apiPath =$"{apiEntityPath}/{nameof(MSearch)}";
          return new {{ http_client_project.module_req_name }}(apiPath).PostAsync<TokenPageListResp<{{entity_code}}Mo>>(req);
    }

    /// <inheritdoc />
    public Task<Resp<{{entity_code}}Mo>> Get(long id)
    {
          var apiPath =$"{apiEntityPath}/{nameof(Get)}?id={id}";
          return new {{http_client_project.module_req_name}}(apiPath).GetAsync<Resp<{{entity_code}}Mo>>();
    }
    
    /// <inheritdoc />
    public Task<Resp> SetUseable(string pass_token, ushort flag)
    {
          var apiPath =$"{apiEntityPath}/{nameof(SetUseable)}?pass_token={pass_token}&flag={flag}";

          return new {{http_client_project.module_req_name}}(apiPath).PostAsync<Resp>();
    }

    /// <inheritdoc />
    public Task<LongResp> Add(Add{{entity_code}}Req req)
    {
          var apiPath =$"{apiEntityPath}/{nameof(Add)}";
          return new {{http_client_project.module_req_name}}(apiPath).PostAsync<LongResp>(req);
    }
}
